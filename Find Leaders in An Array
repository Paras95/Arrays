Given an array of positive integers. Your task is to find the leaders in the array.
Note: An element of array is leader if it is greater than or equal to all the elements to its right side. Also, the rightmost element is always a leader. 

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N denoting the size of array.
The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
Print all the leaders.

Constraints:
1 <= T <= 100
1 <= N <= 107
0 <= Ai <= 107

Example:
Input:
3
6
16 17 4 3 5 2
5
1 2 3 4 0
5
7 4 5 7 3
Output:
17 5 2
4 0
7 7 3

Explanation:
Testcase 3: All elements on the right of 7 (at index 0) are smaller than or equal to 7. Also, all the elements of right side of 7 (at index 3) are smaller than 7. And, the last element 3 is itself a leader since no elements are on its right.
************************************Code***********************************************
#include<iostream>
#include<bits/stdc++.h>
#include<cmath>
#include<algorithm>
#include<stack>
using namespace std;
int maxn(int a,int b)
{
    return (a>=b?a:b);
}

void _LeaderInArray(int arr[],int n)
{
  int rightMaxArray[n];
  rightMaxArray[n-1]=arr[n-1];
  for(int i=n-2;i>=0;i--)
  {
    rightMaxArray[i]=maxn(rightMaxArray[i+1],arr[i]);
  }
  for(int i=0;i<n-1;i++)
  {
    if(arr[i]>=rightMaxArray[i+1])
    {
      std::cout<<arr[i]<<" ";
    }
  }
  std::cout<<arr[n-1];
}

int main()
{
  int test;
  std::cin>>test;
  while(test--)
  {
    int n;
    std::cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
      std::cin>>arr[i];
    }
    _LeaderInArray(arr,n);
    std::cout<<endl;
  }
  return 0;
}
