Given an array A of N integers, find a combination of four elements in the array whose sum is equal to a given value X.

Input:
First line consists of T test cases. First line of every test case consists of an integer N, denoting the number of elements in an array. Second line consists of N spaced array elements. Third line of every test case X.

Output:
Single line output, print 1 if combination is found else 0.

Constraints:
1 <= T <= 100
1 <= N <= 106

Example:
Input:
1
6
1 5 1 0 6 0
7
Output:
1

Explantion:
Testcase 1: 1, 5, 1, 0 are the four elements which makes sum 7.

Code::

#include<iostream>
#include<bits/stdc++.h>
#include<algorithm>
#include<iostream>
using namespace std;

int compare(const void *a,const void *b)
{
  return (*(int *)a - *(int *)b);
}

int fourSum(int arr[],int n,int k)
{
  qsort(arr,n,sizeof(arr[0]),compare);
  int l,r;
  for(int i=0;i<n-3;i++)
  {
    for(int j=i+1;j<n-2;j++)
    {
      l=j+1;
      r=n-1;
      while(l<r)
      {
        if(arr[i]+arr[j]+arr[l]+arr[r]==k)
        {
          return 1;
        }
        if(arr[i]+arr[j]+arr[l]+arr[r]<k)
        {
          l++;
        }
        else
        {
          r--;
        }
      }
    }
  }
  return 0;
}
int main()
{
  int test;
  std::cin>>test;
  while(test--)
  {
    int n;
    std::cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
      std::cin>>arr[i];
    }
    int k;
    std::cin>>k;
    if(fourSum(arr,n,k))
    {
      std::cout<<"1"<<endl;
    }
    else
    {
      std::cout<<"0"<<endl;
    }
  }
  return 0;
}
